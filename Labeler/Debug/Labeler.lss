
Labeler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000004e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000470  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800200  00800200  000004e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019b5  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011cb  00000000  00000000  000020c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e34  00000000  00000000  00003294  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  000040c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000981  00000000  00000000  00004508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c32  00000000  00000000  00004e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005abb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	0b c2       	rjmp	.+1046   	; 0x41c <__vector_1>
   6:	00 00       	nop
   8:	1d c2       	rjmp	.+1082   	; 0x444 <__vector_2>
   a:	00 00       	nop
   c:	d8 c1       	rjmp	.+944    	; 0x3be <__vector_3>
   e:	00 00       	nop
  10:	c2 c1       	rjmp	.+900    	; 0x396 <__vector_4>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	62 c1       	rjmp	.+708    	; 0x382 <__vector_47>
  be:	00 00       	nop
  c0:	38 c1       	rjmp	.+624    	; 0x332 <__vector_48>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 30       	cpi	r26, 0x04	; 4
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	fa d0       	rcall	.+500    	; 0x2fa <main>
 106:	b2 c1       	rjmp	.+868    	; 0x46c <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <ADC_Laser_init>:
{
	// ADC Konfiguration
	
	// ADMUX definieren
	// rechtsbündig
	ADMUX &= ~(1<<ADLAR);
 10a:	ec e7       	ldi	r30, 0x7C	; 124
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8f 7d       	andi	r24, 0xDF	; 223
 112:	80 83       	st	Z, r24
	// AVCC als Referenzspannung
	ADMUX |= (1<<REFS0);
 114:	80 81       	ld	r24, Z
 116:	80 64       	ori	r24, 0x40	; 64
 118:	80 83       	st	Z, r24
	// Wahl des Eingangs PK5
	ADMUX |= (1<<MUX2) | (1<<MUX0);
 11a:	80 81       	ld	r24, Z
 11c:	85 60       	ori	r24, 0x05	; 5
 11e:	80 83       	st	Z, r24
	
	// MUX5 konfigurieren
	ADCSRB |= (1<<MUX5);
 120:	eb e7       	ldi	r30, 0x7B	; 123
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 60       	ori	r24, 0x08	; 8
 128:	80 83       	st	Z, r24
	
	// ADCSRA konfigurieren
	// Wandler einschalten, Prescaler 128
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	87 e8       	ldi	r24, 0x87	; 135
 130:	80 83       	st	Z, r24
	
	// Laser-Sensor 2: PK5 als Eingang
	DDRK &= ~(1<<PK5);
 132:	a7 e0       	ldi	r26, 0x07	; 7
 134:	b1 e0       	ldi	r27, 0x01	; 1
 136:	8c 91       	ld	r24, X
 138:	8f 7d       	andi	r24, 0xDF	; 223
 13a:	8c 93       	st	X, r24


	// erste Wandlung durchführen, dauert länger
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADSC);
 13c:	87 ec       	ldi	r24, 0xC7	; 199
 13e:	80 83       	st	Z, r24
	
	// uart_Schnittstelle initialisieren
	uart_init(); // ToDo: wegmachen 
 140:	7d c0       	rjmp	.+250    	; 0x23c <uart_init>
 142:	08 95       	ret

00000144 <lcd_cmd>:
	_delay_ms(1);						// Befehlsausführung
}

void lcd_cmd(unsigned char cmd)
{
	PORTC &= (ENABLE + RS232BITS);		// OHB=0 und RS=0 setzen
 144:	98 b1       	in	r25, 0x08	; 8
 146:	9b 70       	andi	r25, 0x0B	; 11
 148:	98 b9       	out	0x08, r25	; 8
	PORTC |= ENABLE;					// E=1 setzen
 14a:	98 b1       	in	r25, 0x08	; 8
 14c:	98 60       	ori	r25, 0x08	; 8
 14e:	98 b9       	out	0x08, r25	; 8
	PORTC |= (cmd & OHB);				// Einsen aus OHB von cmd übernehmen
 150:	98 b1       	in	r25, 0x08	; 8
 152:	28 2f       	mov	r18, r24
 154:	20 7f       	andi	r18, 0xF0	; 240
 156:	92 2b       	or	r25, r18
 158:	98 b9       	out	0x08, r25	; 8
	PORTC &= ~ENABLE;					// E=0 setzen
 15a:	98 b1       	in	r25, 0x08	; 8
 15c:	97 7f       	andi	r25, 0xF7	; 247
 15e:	98 b9       	out	0x08, r25	; 8
	PORTC |= ENABLE;					// E=1 setzen
 160:	98 b1       	in	r25, 0x08	; 8
 162:	98 60       	ori	r25, 0x08	; 8
 164:	98 b9       	out	0x08, r25	; 8
	PORTC &= ~OHB;						// OHB in PORTC löschen
 166:	98 b1       	in	r25, 0x08	; 8
 168:	9f 70       	andi	r25, 0x0F	; 15
 16a:	98 b9       	out	0x08, r25	; 8
	PORTC |= (cmd<<4);					// UHB von cmd in OHB von PORTD schreiben
 16c:	28 b1       	in	r18, 0x08	; 8
 16e:	30 e1       	ldi	r19, 0x10	; 16
 170:	83 9f       	mul	r24, r19
 172:	c0 01       	movw	r24, r0
 174:	11 24       	eor	r1, r1
 176:	82 2b       	or	r24, r18
 178:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~ENABLE;					// E=0 setzen
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	87 7f       	andi	r24, 0xF7	; 247
 17e:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	8f e9       	ldi	r24, 0x9F	; 159
 182:	9f e0       	ldi	r25, 0x0F	; 15
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_cmd+0x40>
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_cmd+0x46>
 18a:	00 00       	nop
 18c:	08 95       	ret

0000018e <lcd_init>:
// READ ME END
// ***********************************************************************************************************************

void lcd_init()
{
	DDRC |= (OHB + ENABLE + RS);		// Ausgänge PC2 bis PC7 setzen
 18e:	87 b1       	in	r24, 0x07	; 7
 190:	8c 6f       	ori	r24, 0xFC	; 252
 192:	87 b9       	out	0x07, r24	; 7
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	89 ef       	ldi	r24, 0xF9	; 249
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <lcd_init+0xc>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_init+0x16>
 1a4:	00 00       	nop
	_delay_ms(20);						// Wartezeit nach PowerUp
	PORTC &= (ENABLE + RS232BITS);		// OHB=0 und RS=0 setzen
 1a6:	88 b1       	in	r24, 0x08	; 8
 1a8:	8b 70       	andi	r24, 0x0B	; 11
 1aa:	88 b9       	out	0x08, r24	; 8
	PORTC |= (LCD_RESET + ENABLE);		// LCD-Reset und E=1 setzen
 1ac:	88 b1       	in	r24, 0x08	; 8
 1ae:	88 63       	ori	r24, 0x38	; 56
 1b0:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~ENABLE;					// E=0 setzen
 1b2:	88 b1       	in	r24, 0x08	; 8
 1b4:	87 7f       	andi	r24, 0xF7	; 247
 1b6:	88 b9       	out	0x08, r24	; 8
 1b8:	8f e1       	ldi	r24, 0x1F	; 31
 1ba:	9e e4       	ldi	r25, 0x4E	; 78
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_init+0x2e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <lcd_init+0x34>
 1c2:	00 00       	nop
	_delay_ms(5);						// Befehlsausführung
	PORTC |= ENABLE;					// E=1 setzen
 1c4:	88 b1       	in	r24, 0x08	; 8
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~ENABLE;					// E=0 setzen
 1ca:	88 b1       	in	r24, 0x08	; 8
 1cc:	87 7f       	andi	r24, 0xF7	; 247
 1ce:	88 b9       	out	0x08, r24	; 8
 1d0:	8f e9       	ldi	r24, 0x9F	; 159
 1d2:	9f e0       	ldi	r25, 0x0F	; 15
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x46>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_init+0x4c>
 1da:	00 00       	nop
	_delay_ms(1);						// Befehlsausführung
	PORTC |= ENABLE;					// E=1 setzen
 1dc:	88 b1       	in	r24, 0x08	; 8
 1de:	88 60       	ori	r24, 0x08	; 8
 1e0:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~ENABLE;					// E=0 setzen
 1e2:	88 b1       	in	r24, 0x08	; 8
 1e4:	87 7f       	andi	r24, 0xF7	; 247
 1e6:	88 b9       	out	0x08, r24	; 8
 1e8:	8f e9       	ldi	r24, 0x9F	; 159
 1ea:	9f e0       	ldi	r25, 0x0F	; 15
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init+0x5e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_init+0x64>
 1f2:	00 00       	nop
	_delay_ms(1);						// Befehlsausführung
	PORTC |= ENABLE;					// E=1 setzen
 1f4:	88 b1       	in	r24, 0x08	; 8
 1f6:	88 60       	ori	r24, 0x08	; 8
 1f8:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~OHB;						// OHB in PORTD löschen
 1fa:	88 b1       	in	r24, 0x08	; 8
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	88 b9       	out	0x08, r24	; 8
	PORTC |= LCD_INTERFACE;				// 4-Bit Interface setzen
 200:	88 b1       	in	r24, 0x08	; 8
 202:	80 62       	ori	r24, 0x20	; 32
 204:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~ENABLE;					// E=0 setzen
 206:	88 b1       	in	r24, 0x08	; 8
 208:	87 7f       	andi	r24, 0xF7	; 247
 20a:	88 b9       	out	0x08, r24	; 8
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	9f e0       	ldi	r25, 0x0F	; 15
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x82>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_init+0x88>
 216:	00 00       	nop
	_delay_ms(1);						// Befehlsausführung
	PORTC |= ENABLE;					// E=1 setzen
 218:	88 b1       	in	r24, 0x08	; 8
 21a:	88 60       	ori	r24, 0x08	; 8
 21c:	88 b9       	out	0x08, r24	; 8

	// ab hier ist das 4-Bit Interface aktiv
	lcd_cmd(0x28);						// 4-Bit Interface, 2 zeilig, 5x7 Character
 21e:	88 e2       	ldi	r24, 0x28	; 40
 220:	91 df       	rcall	.-222    	; 0x144 <lcd_cmd>
	lcd_cmd(0x06);						// Cursor increase, no display shift
 222:	86 e0       	ldi	r24, 0x06	; 6
 224:	8f df       	rcall	.-226    	; 0x144 <lcd_cmd>
	lcd_cmd(0x0F);						// Display on
 226:	8f e0       	ldi	r24, 0x0F	; 15
 228:	8d df       	rcall	.-230    	; 0x144 <lcd_cmd>
	lcd_cmd(0x01);						// Display clear
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	8b df       	rcall	.-234    	; 0x144 <lcd_cmd>
 22e:	8f e9       	ldi	r24, 0x9F	; 159
 230:	9f e0       	ldi	r25, 0x0F	; 15
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0xa4>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0xaa>
 238:	00 00       	nop
 23a:	08 95       	ret

0000023c <uart_init>:
 23c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	// Obere beiden Bytes werden ausgeblendet, untere werden gesendet
	uart_send_16bit(data & 0xffff);
	// Obere Bytes werden auf untere Postion verschoben, füllt obere mit Nullen
	// Ausblenden der neuen oberen Bytes zur Sicherheit
	uart_send_16bit((data >> 16) & 0xffff);
}
 240:	88 e0       	ldi	r24, 0x08	; 8
 242:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 246:	88 e1       	ldi	r24, 0x18	; 24
 248:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 252:	08 95       	ret

00000254 <uart_send>:
 254:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 258:	95 ff       	sbrs	r25, 5
 25a:	fc cf       	rjmp	.-8      	; 0x254 <uart_send>
 25c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 260:	08 95       	ret

00000262 <uart_rec>:

char uart_rec(void)
{
	while(!(UCSR0A & (1<<RXC0)));
 262:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 266:	88 23       	and	r24, r24
 268:	e4 f7       	brge	.-8      	; 0x262 <uart_rec>
	
	return UDR0;
 26a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	
}
 26e:	08 95       	ret

00000270 <XY_stop_pwm>:
	TCCR1A = (1<<COM1B0);	
}

void XY_stop_pwm(void)
{
	TCCR3B = 0;
 270:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	TCCR1B = 0;
 274:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
	TCCR3A = 0;
 278:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	TCCR1A = 0;
 27c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 280:	08 95       	ret

00000282 <Z_stop_pwm>:
	// Enable Interrupt on Compare Value OCR5B
	TIMSK5 |= (1<<OCIE5B);
	TIMSK5 |= (1<<OCIE5A);
	
	
	sei();
 282:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
 286:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 28a:	08 95       	ret

0000028c <Z_disable_one_shot_timer>:
}

void Z_disable_one_shot_timer(void)
{
	// Deaktiviere Output Compare B Match Interrupt
	TIMSK5 &= ~(1 << OCIE5B);
 28c:	e3 e7       	ldi	r30, 0x73	; 115
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	8b 7f       	andi	r24, 0xFB	; 251
 294:	80 83       	st	Z, r24

	// No clock source. (Timer / Counter stopped)
	TCCR5B &= ~((1 << CS51) | (1 << CS52) | (1 << CS50));
 296:	e1 e2       	ldi	r30, 0x21	; 33
 298:	f1 e0       	ldi	r31, 0x01	; 1
 29a:	80 81       	ld	r24, Z
 29c:	88 7f       	andi	r24, 0xF8	; 248
 29e:	80 83       	st	Z, r24
 2a0:	08 95       	ret

000002a2 <receive_sentence>:
}


// Returns Numbers of real chars
uint8_t receive_sentence(char* buffer, uint8_t size)
{
 2a2:	ff 92       	push	r15
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
	if (size==0)
 2ac:	66 23       	and	r22, r22
 2ae:	f1 f0       	breq	.+60     	; 0x2ec <receive_sentence+0x4a>
 2b0:	f6 2e       	mov	r15, r22
 2b2:	8c 01       	movw	r16, r24
 2b4:	c0 e0       	ldi	r28, 0x00	; 0
 2b6:	0a c0       	rjmp	.+20     	; 0x2cc <receive_sentence+0x2a>
	}
	
	uint8_t index = 0;
	while(index  < size - 1)
	{
		char single_char = uart_rec();
 2b8:	d4 df       	rcall	.-88     	; 0x262 <uart_rec>
 2ba:	d8 2f       	mov	r29, r24
		uart_send(single_char);
 2bc:	cb df       	rcall	.-106    	; 0x254 <uart_send>
 2be:	dd 23       	and	r29, r29
		
		if (single_char == 00)
 2c0:	71 f0       	breq	.+28     	; 0x2de <receive_sentence+0x3c>
 2c2:	f8 01       	movw	r30, r16
		{
			break;
		}
		
		buffer[index] = single_char;
 2c4:	ec 0f       	add	r30, r28
 2c6:	f1 1d       	adc	r31, r1
 2c8:	d0 83       	st	Z, r29
 2ca:	cf 5f       	subi	r28, 0xFF	; 255
		++index;
 2cc:	4c 2f       	mov	r20, r28
	{
		return 0;
	}
	
	uint8_t index = 0;
	while(index  < size - 1)
 2ce:	50 e0       	ldi	r21, 0x00	; 0
 2d0:	2f 2d       	mov	r18, r15
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	31 09       	sbc	r19, r1
 2d8:	42 17       	cp	r20, r18
 2da:	53 07       	cpc	r21, r19
 2dc:	6c f3       	brlt	.-38     	; 0x2b8 <receive_sentence+0x16>
 2de:	f8 01       	movw	r30, r16
		
		buffer[index] = single_char;
		++index;
	}
	
	buffer[index] = '\0';
 2e0:	ec 0f       	add	r30, r28
 2e2:	f1 1d       	adc	r31, r1
 2e4:	10 82       	st	Z, r1
 2e6:	81 e0       	ldi	r24, 0x01	; 1
	
	return index + 1;
 2e8:	8c 0f       	add	r24, r28
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <receive_sentence+0x4c>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
// Returns Numbers of real chars
uint8_t receive_sentence(char* buffer, uint8_t size)
{
	if (size==0)
	{
		return 0;
 2ee:	df 91       	pop	r29
	}
	
	buffer[index] = '\0';
	
	return index + 1;
}
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	ff 90       	pop	r15
 2f8:	08 95       	ret

000002fa <main>:
 2fa:	cf 93       	push	r28



// OC5B
int main(void)
{
 2fc:	df 93       	push	r29
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	a1 97       	sbiw	r28, 0x21	; 33
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61

	uart_init();	
 30e:	96 df       	rcall	.-212    	; 0x23c <uart_init>
	lcd_init();
 310:	3e df       	rcall	.-388    	; 0x18e <lcd_init>
	ADC_Laser_init();
 312:	fb de       	rcall	.-522    	; 0x10a <ADC_Laser_init>
 314:	1a 82       	std	Y+2, r1	; 0x02
// 	}
	
	
	
	
	char text[33] = "";
 316:	19 82       	std	Y+1, r1	; 0x01
 318:	fe 01       	movw	r30, r28
 31a:	33 96       	adiw	r30, 0x03	; 3
 31c:	8f e1       	ldi	r24, 0x1F	; 31
 31e:	df 01       	movw	r26, r30
 320:	1d 92       	st	X+, r1
 322:	8a 95       	dec	r24
 324:	e9 f7       	brne	.-6      	; 0x320 <main+0x26>
 326:	61 e2       	ldi	r22, 0x21	; 33
	
	while(1)
	{
		uart_send(receive_sentence(text, 33));
 328:	ce 01       	movw	r24, r28
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	ba df       	rcall	.-140    	; 0x2a2 <receive_sentence>
 32e:	92 df       	rcall	.-220    	; 0x254 <uart_send>
 330:	fa cf       	rjmp	.-12     	; 0x326 <main+0x2c>

00000332 <__vector_48>:
 332:	1f 92       	push	r1
// ***********************************************************************************************************************
// INTERRUPT SERVICE ROUTINES BEGIN
// ***********************************************************************************************************************

ISR(TIMER5_COMPB_vect)
{
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	0b b6       	in	r0, 0x3b	; 59
 33e:	0f 92       	push	r0
 340:	2f 93       	push	r18
 342:	3f 93       	push	r19
 344:	4f 93       	push	r20
 346:	5f 93       	push	r21
 348:	6f 93       	push	r22
 34a:	7f 93       	push	r23
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
	Z_stop_pwm();
 358:	94 df       	rcall	.-216    	; 0x282 <Z_stop_pwm>
	Z_disable_one_shot_timer();
 35a:	98 df       	rcall	.-208    	; 0x28c <Z_disable_one_shot_timer>
 35c:	ff 91       	pop	r31
	// 		BitClear(PORTL, Z_DIR);
	// 		toogle = 0;
	
	// 	}
	
}
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0b be       	out	0x3b, r0	; 59
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <__vector_47>:
 382:	1f 92       	push	r1

ISR(TIMER5_COMPA_vect)
{
 384:	0f 92       	push	r0
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	0f 92       	push	r0
 38a:	11 24       	eor	r1, r1
}
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <__vector_4>:



ISR(INT3_vect)
{
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	8f 93       	push	r24
		// Invertiert denken, da Taster gedrückt wenn fallende Flanke!
		if (!IsBitSet(PIND, Y_BOTTOM_LIM_PIN))
 3a2:	4b 99       	sbic	0x09, 3	; 9
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <__vector_4+0x18>
		{
			limit_y_bottom = 1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <limit_y_bottom>
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__vector_4+0x1c>
		}
		else
		{
			limit_y_bottom = 0;
 3ae:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <limit_y_bottom>
		}
}
 3b2:	8f 91       	pop	r24
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <__vector_3>:


ISR(INT2_vect)
{
 3be:	1f 92       	push	r1
 3c0:	0f 92       	push	r0
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	0f 92       	push	r0
 3c6:	11 24       	eor	r1, r1
 3c8:	0b b6       	in	r0, 0x3b	; 59
 3ca:	0f 92       	push	r0
 3cc:	2f 93       	push	r18
 3ce:	3f 93       	push	r19
 3d0:	4f 93       	push	r20
 3d2:	5f 93       	push	r21
 3d4:	6f 93       	push	r22
 3d6:	7f 93       	push	r23
 3d8:	8f 93       	push	r24
 3da:	9f 93       	push	r25
 3dc:	af 93       	push	r26
 3de:	bf 93       	push	r27
 3e0:	ef 93       	push	r30
 3e2:	ff 93       	push	r31
	// Invertiert denken, da Taster gedrückt wenn fallende Flanke!
	if (!IsBitSet(PIND, X_LEFT_LIM_PIN))
 3e4:	4a 99       	sbic	0x09, 2	; 9
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <__vector_3+0x34>
	{
		limit_x_left = 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <limit_x_left>
		XY_stop_pwm();
 3ee:	40 df       	rcall	.-384    	; 0x270 <XY_stop_pwm>
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <__vector_3+0x38>
		
	}
	else
	{
		limit_x_left = 0;
 3f2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <limit_x_left>
		
	}
}
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	bf 91       	pop	r27
 3fc:	af 91       	pop	r26
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	7f 91       	pop	r23
 404:	6f 91       	pop	r22
 406:	5f 91       	pop	r21
 408:	4f 91       	pop	r20
 40a:	3f 91       	pop	r19
 40c:	2f 91       	pop	r18
 40e:	0f 90       	pop	r0
 410:	0b be       	out	0x3b, r0	; 59
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <__vector_1>:

ISR(INT0_vect)
{
 41c:	1f 92       	push	r1
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1
 426:	8f 93       	push	r24
	// Invertiert denken, da Taster gedrückt wenn fallende Flanke!
	if (!IsBitSet(PIND, X_RIGHT_LIM_PIN))
 428:	48 99       	sbic	0x09, 0	; 9
 42a:	04 c0       	rjmp	.+8      	; 0x434 <__vector_1+0x18>
	{
		limit_x_right = 1;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <limit_x_right>
 432:	02 c0       	rjmp	.+4      	; 0x438 <__vector_1+0x1c>
	}
	else
	{
		limit_x_right = 0;
 434:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <limit_x_right>
	}
}
 438:	8f 91       	pop	r24
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <__vector_2>:

ISR(INT1_vect)
{
 444:	1f 92       	push	r1
 446:	0f 92       	push	r0
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	0f 92       	push	r0
 44c:	11 24       	eor	r1, r1
 44e:	8f 93       	push	r24
	// Invertiert denken, da Taster gedrückt wenn fallende Flanke!
	if (!IsBitSet(PIND, Y_TOP_LIM_PIN))
 450:	49 99       	sbic	0x09, 1	; 9
 452:	04 c0       	rjmp	.+8      	; 0x45c <__vector_2+0x18>
	{
		limit_y_top = 1;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__vector_2+0x1c>
	}
	else
	{
		limit_y_top = 0;
 45c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
}
 460:	8f 91       	pop	r24
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <_exit>:
 46c:	f8 94       	cli

0000046e <__stop_program>:
 46e:	ff cf       	rjmp	.-2      	; 0x46e <__stop_program>
